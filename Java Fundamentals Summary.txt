Java Fundamentels - summary
__________________
1. TERMINAL-OUTPUT
------------------

System.out.print("tekst")
-tekst = free to choose-

\n => new line
\r => return

println => Output + ENTER

\t => tab
\" => " (quotes)

\b => backspace
\f => formfeed

\' => '
\\ => \

_________________
2. KEYBOARD-INPUT
-----------------

import java.util.Scanner;

Scanner keyboard = new Scanner (System.in)
-keyboard = free to choose-

var x = keyboard.nextVar();

-var = free to choose variable-
-x = free to choose variableName-
-keyboard = free to choose-
-Var = replace by free to choose variable(same as var)-

keyboard.nextLine(); => empties the last given input

____________
3. VARIABLES
------------
________________________
3.2. PRIMITIVE DATATYPES
------------------------

Integers: (byte, short),int, long
Floating point: float, double
Characters: char
Booleans (false/true): boolean

Text: String
_______________
3.3. PROPERTIES
---------------

can be:
Private		-> Only used inside the Class
Default		-> Use inside the package
Protected	-> Use inside package and SubClasses
Public		-> Useable in all classes

Static		-> ClassVariable not InstanceVariable
Final		-> Constant, can't be changed
type		-> Primitive datatype or ReferenceType (Object)
initValue	-> Initial value of variable
____________
3.4. CASTING
------------

var name = (varToCastTo) newname;


____________
4. OPERATORS
------------

+-*/=

% 	-> rest of division

++	-> +1
--	-> -1

== 	-> equals
!= 	-> equals not
> 	-> higher then
<	-> smaller then
>=	-> higher then or equals
<=	-> smaller then or equals

&&	-> AND
||	-> OR
!	-> NOT

+=	-> op1 += op2	-> op1 = op1 + op2
-=	-> op1 -= op2	-> op1 = op1 - op2
*=	-> op1 *= op2	-> op1 = op1 * op2
/=	-> op1 /= op2	-> op1 = op1 / op2
%=	-> op1 %= op2	-> op1 = op1 % op2
&=	-> op1 &= op2	-> op1 = op1 & op2
|=	-> op1 |= op2	-> op1 = op1 | op2

?:	-> op1?op2:op3
-op1 = condition-
-? op2 = if condition is true give op2-
-: op3 = if condition is false give op3-

.	-> Go to underneath qualified name
[]	-> Array
(,)	-> List of parameters
(type)	-> typeconversion (-type = new type to be given) -> (type)value
(new) 	-> create new object	-> new Object()

instance of	-> check if object is instance of specified class 
-> op instanceof class

_____________
5. STATEMENTS
-------------
_______
5.1. IF
-------

if 	(condition){
	statements;}

-condition = uses operators-
-statement(s) = to do when condition is true-
____________
5.2. IF/ELSE
------------

if	(conditon){
	statement;
} else {
statements;
}

-if = see IF-Statements-
-else-statement(s) = to do when condition is false-


! SWITCH-STATEMENT = Predetermined if-else statement !
=> (this condition = this statement)

switch (variableName) {
case 1: otherVariableName = value; break;
case 2: idem
etc ...
-break = optional-

! final variables !
=> can never be changed
=> names in caps

_______
6.LOOPS
-------
_______________
6.1. WHILE-LOOP
---------------

while 	(condition){
	statements;

1) checking condition
2) to do if condition is true
3) checking condition again
__________________
6.2. DO/WHILE-LOOP
------------------

do {
	statements;}
while (condition);

1) do statement(s)
2) checking condition
3) if condition is true do statement(s) again
_____________
6.3. FOR-LOOP
-------------

for (initialisation;condition;in.decrement){
	statements;
}

1) initialisation
2) checking condition
3) if condition is true, do statement(s)
4) increment or decrement
5) checking condition again

_________________
6.4. FOREACH-LOOP
-----------------

for (type element: arrayName) {
	statements;
}
-element = free choice of name-

__________
7. METHODS
----------

public (static abstract final) void/type name (param 1, param 2) 
throws exeption {
	statements;
	return result;
}

-can be public, private, protected default-
-static = ClassMethod not instanceMethod-

-abstract = Abstract methods have no body, 
should be overriden when implemented-
-final = Can't be overriden by SubClass-

-void = optional-
-type = optional-
-name = free to choose-
-parameters = optional, but when given forced to use-

-throws exception = Defines possible exceptions to accure 
when the method is used-
-statements = to do-
-return type as var if static-

type => returns a value of the given type
void => returns action

When method is stored in seperate class:
to call => classname.methodname
_____________________________________________
7.Bis. METHODS WITH VARIABLE NUMBER OF PARAMS
---------------------------------------------

returnType methodName (type ... params);
-type ... is same use as array of that type-
______________________
7.1. SETTERS & GETTERS
----------------------

-basic setters-
public void setX (type x) {
	this.x = x;
}

-> used for constructors to acces variable

-basic getters-
public type getX () {
	return result;
}

-> used to call a given variable
-> return must give a result of given type

(can be auto-generated by ALT + INSERT)
_______________________
7.2. METHOD OVERLOADING
-----------------------

Methods can have the same name, the method will be chosen by choice of given params.

-> calling methods: ClassName.method();
___________________
7.3. OBJECT-METHODS
-------------------

toString()		-> should be overriden in classes to be usefull
equals() & hashcode ()	-> used to compare 2 objects
(can be auto-generated by ALT + INSERT)

____________________________________
8. OOP (Object Oriented Programming)
------------------------------------

An Object:
IS 	-> properties
HAS 	-> methods

purpose: 
Trying to keep properties unaccesible outside the class.
Use of class by call of methods.

Creation of an object	-> Object name = new Object();
_________________
8.1. CONSTRUCTORS
-----------------

Basic method to create a new object
public|private|protected|default ClassName (params){
	initialisation;
}

-> Used to create new object from given class
(can be auto-generated by ALT + INSERT)

->using this can make a constructor with lesser params 
call a constructor with more params

____________________________
8.2. STRING VS STRINGBUILDER
----------------------------

! Strings are immutable !

String-object are kept in the string constant pool

-> when a new string is constructed VM will check if it's already present in the pool
in which case it will juste give it's reference

StringBuilder can be changed

some methods:
.append()		=> add a String at the end of the StringBuilder-Object
.instert(int offset, )	=> add a String inside a Stringbuilder-Object at given place
______________
8.3. FORMATTER
--------------

Formatter name = new Formatter();
name.format(text,variables)

To enter specified variable within the text use:
%b	-> boolean
%c	-> character

%d	-> int
%f	-> floating point number
%s	-> String

%e	-> scientific notation
%n	-> new line

_________
9. ARRAYS
---------

dataType [] arrayName = new dataType [length] {parameters};
-{parameters} = optional-

other way to fill up the array:
instead of {parameters}
{
arrayName [index] = value
etc...
_______________________________
9.Bis. MULTI-DIMENSIONAL ARRAYS
-------------------------------

dataType [][] name = new dataType [lenghtFirstArray][lenghtSecondArray]{{parametersFirstArray},

{parametersSecondArray}};

___________
10. CLASSES
-----------

public abstract final class ClassName extends SuperClass implements Interface {
//class body
}

-public or default-
-abstract = can only be used to be distracted to other classes-
-final = can not be used to be distracted to other classes-
-extends SuperClass = SubClass distracted from SuperClass (or abstract)-
-implements Interface = Uses interface and thus must implement methods-

_____________
11. RELATIONS
-------------
__________________
11.1. ASSOCIATIONS
------------------

A class using a method from another Class (must be imported)
(Class has a OtherClass)
__________________
11.2. AGGREGATIONS
------------------

A class ownes another class.
__________________
11.3. COMPOSITIONS
------------------

A class is made out of different other classes/objects.
____________________
11.Bis HIGH COHESION
--------------------

One class, one task.

_______________
12. INHERITANCE
---------------

(Class is a OtherClass)
_______________________________
12.1. SUBCLASSES & SUPERCLASSES
-------------------------------

Subclasses inherite all properties and methods.
Methods can be overriden and added.

abstract classes: 
->Can only be distracted to other classes
->Can not extend superclasses
->Can only have abstract methods

defining abstrac classes:
public abstract class AbstractClassName {
...
}

defining subclasses:
class Subclass extends SuperClass {
...
}

inheritance of properties and methods:
private		->classbound
default 	->packagebound
protected	->package and subclasses
public		->all classes

->Variables can be hidden by giving it another value in subclasses.

to override methods:
@Override
public void methodNameSuperClass (params) {
...
}
__________________
12.2. POLYMORPHISM
------------------

Subclasses inherite superclasses but can take different formes.
____________________________
12.Bis SUBCLASS CONSTRUCTORS
----------------------------

Constructors are not inhereted from superclass.
Each subclass should have its own constructor.

________________
13. ENUMERATIONS
----------------

public enum Name {
	FINALS;
}

__________________
14. SIMPLE CLASSES
------------------
_____________
14.1 WRAPPERS
-------------

Byte		-> byte
Short		-> short
Integer		-> int
Long		-> long
Float		-> float
Double		-> double
BigInteger	-> Integer with unlimited precision
BigDecimal	-> Decimal with unlimited precision
Boolean		-> boolean
Character	-> char

->Wrapper-objects are immutable (just as String)
->Wrapper-class has also static members 
(such as, MAX_VALUE, MIN_VALUE, NaN, NEGETIVE_INFINITY, POSITIVE_INFINITY)
_________________
14.2. DATE & TIME
-----------------
_______________
14.2.1. INSTANT
---------------

Instant now = Instant.now();

-> gives the exact time when and where called to.
-> has methods for calculations from a given time and/or date
_________________________
14.2.2. HUMAN DATE & TIME
-------------------------

Month
-> instances for all months

DaysOfWeek
-> instances for all dayNames
_________________________
14.2.3. LOCAL DATE & TIME
-------------------------

1) LocalTime	-> Local time in hours, minutes, seconds, ...
2) LocalDate	-> Local date in years, months, days, ...
3) LocalDateTime-> Local date and time combined
_________________
14.2.4. TIMEZONES
-----------------

ZoneId name = ZoneId.of("Region/City")

1) ZoneId = gives date and/or time from given region and city.
2) ZoneOffSet = gives date and/or time from given difference of UTC
____________________
14.2.5. TIMEDURATION
--------------------

1) Duration = differences of the Instant-class
2) ChronoUnit = enumeration of different time-units between 2 given times.
3) Period = gives time-differences in human notations
_______________________
14.2.6. DATE-FORMATTING
-----------------------

DateTimeFormatter = uses patterns to format time and/or date 
in specified format (see also 8.3. FORMATTER)

tY	-> yyyy (years)
ty	-> yy (years)
tB	-> month, entire name
tb	-> month, abbreviated
tm	-> mm (month)
td	-> dd (day)
tH	-> hours /24
tl	-> hours /12
tM	-> mm (minutes)
tS	-> ss (seconds)

______________
15. INTERFACES
--------------

Definition: collection of abstract methods for use in objects.

- Gives different objects indentical behaviour 
(even in case of different superclass).
- Implementing methods
- Indirect use of object (by interface not the class itself).
- Can be used for collecting constant values.

-> In general name should end on -able

public interface InterfaceName extends SuperInts {
	...
}

-> All methods are implicitly public and abstract
-> All params are also implicitly public, static and final.
-> Methods can be static or void.
-> New object can be made out of interface
(InterfaceName name = new Object(); -where the Object implements the right interface)

________________________________
16. NESTED AND ANONYMOUS CLASSES
--------------------------------

-> Class within another Class
___________________
16.1. INNER CLASSES
-------------------

public class OuterClass {
	...
	public class InnerClass {
	...
	}
	...
}

-full name = OuterClass.InnerClass-

to make an object of the InnerClass:
- from withing the OuterClass	-> InnerClass name = new InnerClass ();
- from another Class		-> OuterClass outerName = new OuterClass();
+	-> OuterClass.InnerClass innerName = outerName.new Innerclass();

to reference a this of OuterClass within an InnerClas:
use: OuterClass.this
_________________________
16.2. LOCAL INNER CLASSES
-------------------------

-> inner class within a method of outer class
-> they have only acces to variables within the method 
that are therefor implicitly final

public class OuterClass {
	public void aMethod () {
	final var = x;
	class LocalInnerClass {
	...
	}
}}
_____________________________
16.3. ANONYMOUS INNER CLASSES
-----------------------------

-> Inner Classes without name, defined when created into Objects

public class OuterClass {
	...
	public void method () {
	SuperClass object1 = new SuperClass () {
	//Implementations and/or Overrides
	};
	Interface object2 = new Interface() {
	//Implementations
	};
	}
{
___________________________
16.4. STATIC NESTED CLASSES
---------------------------

public class OuterClass {
	public static class InnerClass {
	}
}

-> Static Nested classes can not acces directly 
outerclass-properties & -methods.

Other example of Static nested class (as enum):
public class OuterClass {
	public enum EnumClass {
	...
	}
}

(nested enums can not be defined within methods)

______________________
17. EXCEPTION HANDLING
----------------------

- Handels exceptions grouped and separated from rest of code.
- Does call stack (back to front)
- Can handle exception at top of hierarchy 
(so an exception for a superclass can be handled as wel for all subclasses)

catching exceptions:

try {
	statements;
	} catch (ExceptionName en) {
	//actions to do
	} catch (OtherException oe) {
	//actions to do
	}

catching multiple exceptions

try {
	statements;
	} catch (ExceptionName|OtherException e) {
	//actions todo
	}

with finally codeblock:

try {
	...
	} catch () {
	...
	} finally {
	...
}

-> even when Exception hit, finally-block will always be carried out.

throw exceptions:

public void method () throws Exception {
	if (condition) throw new exception ();
	else statements;
}
_______________________
17.1. EXCEPTION-CLASSES
-----------------------

public class ExceptionName extends ExistingException {
	ExceptionConstructors for ex. message, cause;
}

____________
18. GENERICS
------------

public class ClassName <E1,E2> {
	private E1 name;
	private E2 secondName;

public ClassName (E1 name, E2 secondName){
	this.name = name;
	this.secondName = secondName;
	}
}

-To explicitely use a certain kind of type <E> can be replaced by
-><E extends ...>
-(... ex. Number, ...)-

-if the generic to be used is not known 
you can use the wildcar (= ?) with a height-limit
-> example: <? extends Number>

-or to exlude subclasses
-> <? super Number>

-for arrays alwas use wildcard

______________________
19. LAMBDA-EXPRESSIONS
----------------------
___________________________
19.1. FUNCTIONAL INTERFACES
---------------------------

-Can only have one abstract method

@FunctionalInterface
public interface Name {
	...;
}
______________________________
19.2. BASIC LAMBDA-EXPRESSIONS
------------------------------

defining lambda-expression (example):
object.methodImplementingFI ((String s) -> s.contains("e"));

The 3 parts of lambda-expressions:
1) params: (String s) OR (var s) OR (s) OR s
2) arrow: ->
3) body: expression or codeblock that implements the functional method
_______________________
19.3. METHOD-REFERENCES
-----------------------

qualifier::identifier

for static methods:
-> className::staticMethodName

for methods of bounded objects:
-> objectName::methodName

for methods of unbounded objects:
-> ParameterType::methodName

for constructor-references:
-> ClassName::new
_________________________________
19.4. BASIC FUNCTIONAL INTERFACES
---------------------------------

1) Predicate<T>
	abstract method:
	public boolean test (T t);
	
	default-methods:
	and(Predicate <? super T> other)
	or(Predicate <? super T> other)
	negate()

2)Function<T,R>
	abstract method:
	public R apply (T t);

	default)methods:
	andThen (Function <? super R, ? extends V> after)
	compose (Function <? super V, ? extends T> before)

3)Consumer<T>
	abstract method:
	public void accept (T t);

	default method:
	andThen (Consumer<? super T> after)

_____________
20. STREAMING
-------------

example:
int [] numbers = {1,2,3,4,5,6};

Stream

Enter source:
.of(numbers)

Iterator:
.forEach();
_____________
20.1. SOURCES
-------------

sorts of Streams:
1)Stream<T>: generic objects
2)IntStream: stream of integers
3)LongStream: stream of longs
4)DoubleStream: stream of doubles

sources of Streams:
1)collection of elements
2)generator
3)I/O-channel

Generate Stream:
.generate()
	abstract method:
	public T get();

not-generic objects:
	methods:
	.range()
	.rangeClosed()
	.iterate(initNumber,functionalMethod)
		functionalMethod:
		public int applyAsInt (int operand);
________________
20.2. OPERATIONS
----------------
_______________________________
20.2.1. INTERMEDIATE OPERATIONS
-------------------------------

1) Filter: new stream with elements of given requirements
2) Conversion: new stream with converted elements
3) Sorting: new stream with sorted elements of first stream
_________________
20.2.1.1. FILTERS
-----------------

.filter(lambda-expression)

-can contain multiple filters

pre-existing filters:
.distinct() => removes all duplicates
.limit() => limits the number of elements to keep
.skip() => skips certain elements
____________________
20.2.1.2. CONVERSION
--------------------

method-examples:
IntStream mapToInt (ToIntFunction<? super T> mapper)
LongStream mapToLong (ToLongFunction<? super T> mapper)
DoubleStream mapToDouble (ToDoubleFunction<? super T> mapper)
<R> Stream<R> map (Function<? super T,? extends R> mapper)

use-examples:
.mapToInt(lambda-expression)
.map(lambda-expression)
_________________
20.2.1.3. SORTING
-----------------

.sorted()
(uses automatic generated sorting algorithm from Comparator)
______________________
20.2.2. END-OPERATIONS
----------------------

1) Nothing (consuming)
2) New data (reducing)
3) New collection (collecting)
______________________________
20.2.2.1. CONSUMING OPERATIONS
------------------------------

.forEach (Consumer<? super T> action)

example:
Stream.of(input)
	.forEach(System.out::println);
_____________________________
20.2.2.2. REDUCING OPERATIONS
-----------------------------

.sum() - example:
int sum = IntStream.rangeClosed(begin,end)
			.sum();

.max() - example:
OptionalInt max = IntStream.rangeClosed(begin,end)
				.max();

Usercreated reduce-operation:
.reduce(begin,(acc,el)->acc//doSomething//el);

->begin = optional beginValue
->acc = accumulationValue
->el = elementValue
->doSomething = operation to do
_______________________________
20.2.2.3. COLLECTING OPERATIONS
-------------------------------

.collect()

Array-example:
.toArray();

_______________
21. COLLECTIONS
---------------
___________________________
21.1. COLLECTIONS FRAMEWORK
---------------------------

possibilities:
1) Adding an object at a collection
2) Removing an object from a collection
3) Checking if an object is present in a collection
4) Request an object from a collection
5) Iterate a collection
_____________________________________
21.2. COLLECTIONS AND IMPLEMENTATIONS
-------------------------------------

basic methods:
boolean add (E e) => add element to collection
boolean remove (Object o) => remove element from collection
void clear () => removes all elements from a collection
boolean contains (Object o) => checks if an element is present
Iterator<E> iterator () => iterates the collection
int size() => gives the number of elements in a collection
forEach() => iterates collection and uses functional method
stream() => gives a stream of all elements in a collection

Iterator-methods basics:
.hasnext() => show if there is a next element
.next() => gives the next element
____________
21.2.1. LIST
------------

List is a subclass of Collection thus inherites all methods

-A list is ordened
-Duplicates are possible
-IndexValue

basic methods:
-> Collection-methods

+

void add (int index, E e) => adds element on given position 
				(rest is shifted)
void set (int index, E e) => replaces element on given position
E get (int index) => gives element on given position
E remove (int index) => removes element on given position
				(rest is shifted)
___________________
21.2.1.1. ARRAYLIST
-------------------

-Quick random acces by index

methods: see List-methods
____________________
21.2.1.2. LINKEDLIST
--------------------

-Quick adding, removing etc...
-Each element is linked before and after

methods: 
List-methods (21.2.1.) 
+ 
Duque-methods (21.2.3.2.)
___________
21.2.2. SET
-----------

-No duplicates
-No index

methods: see Collection-methods
_________________
21.2.2.1. HASHSET
-----------------

-Not ordened
-Not sorted
-Quick random acces

methods: see Collection-methods
_______________________
21.2.2.2. LINKEDHASHSET
-----------------------

-Ordened
-Not sorted
-Quick random acces

methods: see Collection-methods
___________________
21.2.2.3. SORTEDSET
-------------------

-Ordened
-Sorted

methods:
-> Set-methods

+

E  first() => gives first element
E last() => gives last element
__________________________
21.2.2.3.BIS. NAVIGABLESET
--------------------------

methods:
-> SortedSet-methods

+

E ceiling() => gives element that is bigger or equal 
		to a given element
E floor() => gives element that is smaller or equal
		to a given element
E higher() => gives next element bigger than given element
E lower() => gives next element lower than given element
_________________________
21.2.2.3.BIS.BIS. TREESET
-------------------------

-Treestructured

methods: See Collection-methods
_____________
21.2.3. QUEUE
-------------

-Ordened

methods:
-> Collection-methods

+

offer (E e) 	=> adds element to a queue
E peek()	=> gives next element but doesn't remove it
		=> gives null when queue is empty
E element() 	=> gives next element but doesn't remove it
		=> throws exception when queue is empty
E poll()	=> gives next element and removes it
		=> gives null when queue is empty
E remove()	=> gives next element and removes it
		=> throws exception when queue is empty
_______________________
21.2.3.1. PRIORITYQUEUE
-----------------------

methods: see Queuemethods
_______________
21.2.3.2. DEQUE
---------------

-Head- and tail-access

methods:
-> Queuemethods

offerfirst (E e) - addFirst (E e)
=> adds element at head
E peekFirst() - E getFirst()
=> gives next element at head but doesn't remove it
E pollFirst() - E removeFirst()
=> gives next element at head and removes it
offerLast (E e) - addLast (E e)
=> adds element at tail
E peekLast() - E getLast()
=> gives next element at tail but doesn't remove it
E pollLast() - E removeLast()
=> gives next element at tail and removes it
______________________
21.2.3.2.1. LINKEDLIST
----------------------

(see 21.2.1.2.)
______________________
21.2.3.2.2. ARRAYDEQUE
----------------------

methods: see Deque-methods
________________________________________________
21.2.4. COMPARISON OF COLLECTION-IMPLEMENTATIONS
------------------------------------------------

		Unique |Ordened |Sorted |Random Access
HashSet		   X	   O	   O		O
LinkedHashSet	   X	   X	   O		O
TreeSet		   X	   X	   X		O
LinkedList	   O	   X	   O		O
ArrayList	   O	   X	   O		X
PriorityQue	   O	   X	   X		O
Duque		   O	   X	   O		O
___________________________
21.2.5. SORTING COLLECTIONS
---------------------------
___________________________
21.2.5.1. INTRINSIC SORTING
---------------------------

Sorting by collection-methods (like SortedSet, Treeset, PriorityQueue, ...)

Types of sorting:

1) Natural order by implementing the Comparable<T> interface.
method:
public int compareTo (T o)
-> gives negative value when the element is lower then the given element
-> gives positive value when the element is higher then the given element

2) Comparator sorting determined by comparator implemented by constructor
! Do not implement Comparable interface !
-> the constructor implements the Comparator-interface

method:
public int compare (T object, T object2)
-> can be used if the object to compare don't hava a natural order
-> can be used if another order is desirable

-sorting collections only accept element that implements
the needed interface, if not an exception will be thrown-

-> Comparator also has a method .thenComparing() for further comparison

-> in a TreeSet duplicates will throw a value of 0
____________________________________
21.2.5.2. SINGULAR SORTING OF A LIST
------------------------------------

Lists can be singulairy sorted by use of the static method .sort()
wich makes use of the Collections-classe no longer needed.

-> .sort() uses a comparator as parmeter
-> to use a natural ordening comparator, use naturalorder()
-> in contradiction to TreeSet compareTo() method with 0 value
	will not erase it from the collection.
_______________________________
21.2.6. COLLECTIONS AND STREAMS
-------------------------------

Collection-interface features the stream() methode
thus a collection can be used as stream-input.
All stream-methods are useable.

You can use .collect to recollect the streamdata.
_______________________________________
21.3. INTERFACE MAP AND IMPLEMENTATIONS
---------------------------------------

The map-(standalone)-framework are collections containing pairs of objects.

1) key -> used to easily identify and find a value object in the collection
2) value -> actual object
___________
21.3.1. MAP
-----------

-> Map uses generics to define key- and value-objects.

methods:
put (K k, V v) 		=> adds a pair key-value
V get (K k)		=> gives the value of a given key
V remove (Object k)	=> deletes a pair key-value
keySet ()		=> gives the collection of keys in Setform
default forEach()	=> iterates the key-value-pairs and apllies functional method
_________________
21.3.1.1. HASHMAP
-----------------

- Not ordened
- Not sorted

-> null is permitted as key (once) and as value (several)
-> keys are saved same way as in a HashSet, so equals() and hashCode() can be applied to find key
-> keys must be unique, values not neccesarally

Methods: see Map-methods
___________________
21.3.1.2. HASHTABLE
-------------------

- Synchronized version of HashMap

-> null-values not permitted

Methods: see Map-methods
_______________________
21.3.1.3. LINKEDHASHMAP
-----------------------

- Ordened
- Not sorted

-> storage is done the same way as in a LinkedHashSet
-> iterating is done in the same order as adding

Methods: see Map-methods
____________________
21.3.1.BIS SORTEDMAP
--------------------

- Ordened
- Sorted

-> keys are automatically sorted at adding
-> like SortedSet keys should implement Comparable or Comparator

methods:
-> Map-methods

K firstKey()	=> gives the first key
K lastKey()	=> give the last key
___________________________
21.3.1.BIS.BIS NAVIGABLEMAP
---------------------------

-> permits to ask a key closes to a given key

methods:
-> SortedMap-methods

K ceilingKey (K k)	=> gives the key higher or equal to the given key
K floorkey (K k)	=> gives the key lower or equal to the given key
K higherKey (K k)	=> gives the next key higher then the given key
K lowerKey (K k)	=> gives the next key lower then the given key
___________________________
21.3.1.BIS.BIS.BIS. TREEMAP
---------------------------

-Treestructurized NavigableMap

-> key is live sorted at adding

Methods: See NavigableMap-methods

________________________________________________
21.3.2. COMPARISON OF MAP-IMPLEMENTATIONS
------------------------------------------------

		Unique |Ordened |Sorted 
HashMap		   X	   O	   O	
LinkedHashMap	   X	   X	   O	
TreeMap		   X	   X	   X	

______________________
22. I/O (Input/Output)
----------------------
___________________________
22.1. FOLDERS AND DOCUMENTS
---------------------------
______________________
22.1.1. PATH-INTERFACE
----------------------

Use of relative paths leave out the root-folder
. 	= this map
.. 	= parent

_______________
22.1.1.1. LINUX
---------------

- 1 root-folder
- seperator = /
- root = '/'
_________________
22.1.1.2. WINDOWS
-----------------

- multiple roots
- seperator = \
- root ex. = 'C:\'

_________________________
22.1.2. FILESSYSTEM-CLASS
-------------------------

String getSeparator()	-> gives the uses separator for the current FileSystem
Iterable<Path>		-> gives the collecion of basi folders of the FileSystem
getRootDirectories()

___________________
22.1.3. FILES-CLASS
-------------------

Where Path gives the location, Files actually uses the files themselves.

used to:
- Create folders
- Create files
- Write text to files
- Ask attributes of a file
- Read text from files
- Copy files
- Delete files

___________________
22.1.4. FILE-CLASS
-------------------

Paths can be turned into files (path.toFile())
Or files into paths (File.toPath())

_______________
22.2 IO-STREAMS
---------------

Bron 	-> ReadStream	-> Program
Program	-> WriteStream	-> Destination

Possible input-sources:
- files
- pipes
- keyboard
- networks
- memorybuffers

Possible ouput-destinations:
- files
- pipes
- networks
- memorybuffers

Steps to write to a stream:
1) Open stream
2) Write to stream
3) Close stream

Steps to read a stream:
1) Open stream
2) Read stream
3) Close stream

IO-streams are objects from determined classes.

There are 2 kinds of streams by content:
- Character streams = 16-bits streams for e.g. text
- Byte streams = 8-bits streams for e.g. binary data

There are 2 kinds of streams by use:
- Data sink streams = used for reading and writing IO
- Processing streams = used for processing IO

Program <-> Processing Stream <-> Data Sink Stream <-> Destination

_________________________
22.2.1. CHARACTER-STREAMS
-------------------------

Abstract superclasses
- Writer Abstract
- Reader Abstract

_______________________
22.2.1.1. WRITERSTREAMS
-----------------------

Processing WriterStreams
- BufferedWriter
- FilterWriter
- PrintWriter
- OutputStreamWriter

DataSink WriterStreams
- PipedWriter
- StringWriter

	- FileWriter (extends OutputStreamWriter)
_______________________
22.2.1.2. READERSTREAMS
-----------------------

Processing ReaderStreams
- BufferedReader
	- LineNumberReader
- FilterReader
	- PushBackReader
- InputStreamReader

DataSink ReaderStreams
- CharArrayReader
- PipedReader
- StringReader

	- FileReader (extends InputStreamReader)

__________________________
22.2.1.3. SUBCLASS-SUMMARY
--------------------------
BufferedWriter		= Data is buffered. can read or write bigger blocks
BufferedReader		  of data from documents, and thus faster.

LineNumberReader	= Can read lines from a stream by buffering.

FilterWriter		= Abstract classes for making personal processing streams.
FilterReader		  Subclasses replace methods for data-processing.

PushbackReader		= Data are read and put back in stream. Used to peek data.

PrintWriter		= Extra methods to write primitive dataTypes in textform.

InputStreamReader	= Link between character- and bytestreams. Makes conversion
OutputStreamWriter	  between bytes and characters. Possibility for encoding.

FileWriter		= Write and read text from and to documents.
FileReader		  Do conversion between bytes and characters.

PipedWriter 		= Read and write from and to pipes.
PipedReader		  Pipes are used as a channel between threads.

StringWriter		= Read and write from and to Strings.
StringReader		  

CharArrayReader		= Read data from array.
________________________________
22.2.2. USE OF CHARACTER-STREAMS
--------------------------------

To avoid streams to stay open use of "try with resources" is recommended.
=
try (CharacterStream cs = new CharacterStream ("name.ext")) {
cs.method();
} catch (IOException ioe) {
}
____________________________
22.2.2.1. WRITE TEXT TO FILE
----------------------------

Create FileWriter and give a name in the constructor.

Write to document => write()
(this method can generate IOException, so an exception-handling
should be provided.)

Close the stream => close()
(in the finally-block, to be sure it closes at the end)
(can throw an exception as well, so new catch or "try with resources")


_____________________________
22.2.2.2. READ TEXT FROM FILE
-----------------------------

sources :
Java 11 Fundamentals - Noël Vaes
Apprenez à programmer en Java - Cyrille Herby (Open Classrooms)
